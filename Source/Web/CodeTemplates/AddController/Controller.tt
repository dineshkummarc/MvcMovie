<#@ template language="C#" HostSpecific="True" #>
<#
MvcTextTemplateHost mvcHost = (MvcTextTemplateHost)(Host);
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;  
using KendoGridBinder;
using System.Text;
using System.Web.Mvc;
using Web.Models;
using Web.Infrastructure;
<#
var controllerName = mvcHost.ControllerName;
var nameSpace = mvcHost.Namespace;
var tableName = controllerName.Replace("Controller","");
#>
namespace <#= nameSpace #>{
    public class <#= controllerName #> : CruddyController 
	{
        public <#= controllerName #>(ITokenHandler tokenStore):base(tokenStore) 
		{
            _table = new <#= tableName #>();
            ViewBag.Table = _table;
        }
		
		


        [HttpPost]
        public virtual ViewResult Index( FormCollection form)
        {
            TempData["query"] = form["Search"]; 
            var model = GetModel(null, (string)TempData["query"]);
            return View(model.Items);
        } 
        [AuthorizeByRole(Roles = "Dev")]
        public override ActionResult Edit(int id)
        {
            return base.Edit(id);
        }
        [AuthorizeByRole(Roles = "Dev")]
        public override ActionResult Create()
        {
            return base.Create();
        }
        [AuthorizeByRole(Roles = "Dev")]
        public override ActionResult Details(int id)
        {
            return base.Details(id);
        }
		

        [HttpPost]
        public JsonResult Grid(KendoGridRequest request)
        {
            var fromdb = ((<#= tableName #>)_table).All();
            var dto = fromdb.Select(x => new <#= tableName #>Dto 
            { 
                Id = x.Id,
				UpdatedAt = x.UpdatedAt, 
                IpAddress = x.IpAddress
				/*, Level = x.Level, Server = x.Server, 
                Session=x.Session, UserName= x.UserName, 
                Summary = x.Summary,  
                Email = x.Email*/ 
            }).OrderByDescending(x => x.UpdatedAt);
            var grid = new KendoGrid< <#= tableName #>Dto>(request, dto);
            return Json(grid);
        }
         


        private dynamic GetModel(int? id, string searchExpression = "")
        {
            int page = id ?? 1;
            const int ps = 25;
            var whereClause = BuildWhereClause(searchExpression);
            var model = _table.Paged(where: whereClause, orderBy: "UpdatedAt DESC", currentPage: page, pageSize: ps, args: searchExpression);

            ViewBag.CurrentPage = page;
            ViewBag.TotalRecords = model.TotalRecords;
            ViewBag.TotalPages = model.TotalPages;
            ViewBag.PageSize = ps;
            return model;
        }

        private static string BuildWhereClause(string searchExpression)
        {
            var sb = new StringBuilder();
            if (string.IsNullOrEmpty(searchExpression))
            {
                sb.Append(" 1=1 ");
            }
            else
            {
                sb.Append(@"IpAddress LIKE ('%'+@0+'%') 
                        or Session LIKE('%'+@0+'%')
                        or XXXXXXX LIKE('%'+@0+'%')
                        or ZZZZZZZ LIKE('%'+@0+'%')");
            }
            var where = sb.ToString();
            return @where;
        } 
    }
}

